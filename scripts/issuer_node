#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
from collections import namedtuple
from queue import Queue
from threading import Thread
import json

# ROS
import rospy
from std_msgs.msg import String
from issuing_service_agent.ipfs_utils import ipfs_download_txt_file

# AIRA
from robonomics_liability.msg import Liability
from robonomics_liability.srv import StartLiability, FinishLiability
from ethereum_common.eth_keyfile_helper import KeyfileHelper

# Web3
from web3 import Web3, HTTPProvider
from web3.gas_strategies.time_based import medium_gas_price_strategy


class IssuerNode:

    liability_queue = Queue()
    current_liability = None

    def __init__(self):
        rospy.init_node("issuer")
        rospy.loginfo("Launching issuer node...")

        rospy.Subscriber('/liability/ready', Liability, self.on_new_liability)
        rospy.Subscriber('next_liability', Liability, self.subscribe_and_start)
        self.next_liability = rospy.Publisher('next_liability', Liability, queue_size=128)

        rospy.wait_for_service('/liability/finish')

        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('/liability/start', StartLiability),
                                          rospy.ServiceProxy('/liability/finish', FinishLiability))

        web3_http_provider = rospy.get_param('/liability/listener/web3_http_provider')
        http_provider = HTTPProvider(web3_http_provider)
        self.web3 = Web3(http_provider)

        self.emitter_contract = rospy.get_param("~emitter_contract")
        self.emitter_contract_abi = json.loads(rospy.get_param("~emitter_contract_abi"))

        keyfile = rospy.get_param('/liability/infochan/eth/signer/keyfile')
        keyfile_password_file = rospy.get_param('/liability/infochan/eth/signer/keyfile_password_file')
        self.account = KeyfileHelper(keyfile,
                                     keyfile_password_file=keyfile_password_file
                                    ).get_local_account_from_keyfile()

        rospy.loginfo('Issuer node is ready!')

    def on_new_liability(self, msg):
        self.liability_queue.put(msg)
        rospy.loginfo("Got new liability %s", msg.address)

    def _process_liability_queue(self):
        while not rospy.is_shutdown() and self.current_liability is None:
            rospy.loginfo("Publishing liability")
            msg = self.liability_queue.get()
            self.next_liability.publish(msg)

    def parse_log(self, log):
        rospy.loginfo("Parse log {}...".format(log.data))
        # self.pub_data.publish(log)

        data = ipfs_download_txt_file(log.data)
        obj = json.loads(data)

        # extract total production
        total = self._extract_total_production(obj)

        # find start and end time stamps
        self._extract_period(obj)

        # send a transaction to the Emitter
        self._send_tx(total)

        self.unregister_all()
        rospy.loginfo('Process complete.')
        self.current_liability = None

    def _extract_total_production(self, obj):
        total_production = obj["total_production"]
        unit = obj["rows"][0]["unit"]

        rospy.loginfo("Total production: {} {}".format(total_production, unit))
        self.pub_total_production.publish(String(data=str(total_production)))
        self.pub_unit.publish(String(unit))
        return int(total_production) # convert to kWh

    def _extract_period(self, obj):
        rows = obj["rows"]
        start_ts = rows[0]["timestamp"]
        end_ts = rows[-1]["timestamp"]
        period = "from {} to {}".format(start_ts, end_ts)
        rospy.loginfo(period)
        self.pub_period_start.publish(String(data=start_ts))
        self.pub_period_end.publish(String(data=end_ts))

    def _send_tx(self, total):
        contract = self.web3.eth.contract(address=self.emitter_contract, abi=self.emitter_contract_abi)
        nonce = self.web3.eth.getTransactionCount(self.account.address)

        rospy.loginfo("Sending transaction with args: l {}, a {}".format(self.current_liability.address.address, total))

        '''
        transfer_txn = contract.functions.issueCertificate(self.current_liability.address.address, total).buildTransaction({
            'chainId': 4451,
            'gas': 1000000,
            'gasPrice': self.web3.toWei('0', 'gwei'), # Sidechain only
            'nonce': nonce,
        })
        '''
        #calculate gas limit and gas gasPrice
        gas_estimate = contract.functions.issueCertificate(self.current_liability.address.address, total).estimateGas() #calculate gas limit
        w3.eth.setGasPriceStrategy(medium_gas_price_strategy) #choose medium gas prise
        gas_price = w3.eth.generateGasPrice() # generate current gas prise

        transfer_txn = contract.functions.issueCertificate(self.current_liability.address.address, total).buildTransaction({
            'chainId': 1,
            'gas' : gas_estimate,
            'gasPrice' : gas_price,
            'nonce': nonce,
        })

        signed_txn = self.web3.eth.account.signTransaction(transfer_txn, self.account.privateKey
)
        tx_hash = self.web3.eth.sendRawTransaction(signed_txn.rawTransaction)

        rospy.loginfo("Tx hash {}".format(tx_hash.hex()))

        receipt = None
        while receipt is None:
            rospy.sleep(1)
            receipt = self.web3.eth.getTransactionReceipt(tx_hash.hex())

        # rospy.loginfo(receipt)
        if receipt.status == 1:
            token_address = receipt.logs[0].address
            self.pub_status.publish(String("Success"))
        else:
            token_address = '0x0000000000000000000000000000000000000000'
            self.pub_status.publish(String("Fail"))
        rospy.loginfo("Token address: {}".format(token_address))
        self.pub_token.publish(String(data=str(token_address)))

        self.pub_tx.publish(String(data=tx_hash.hex()))

    def subscribe_and_start(self, liability):
        rospy.loginfo('Starting process...')

        # Register any topics you need to publish logs, data etc
        prefix = '/liability/eth_' + liability.address.address
        # self.pub_data = rospy.Publisher(prefix+'/data', String, queue_size=128)
        self.pub_token = rospy.Publisher(prefix + '/token', String, queue_size=128)
        self.pub_total_production = rospy.Publisher(prefix + '/total_production', String, queue_size=128)
        self.pub_tx = rospy.Publisher(prefix + '/txhash', String, queue_size=128)
        self.pub_period_start = rospy.Publisher(prefix + '/period_start', String, queue_size=128)
        self.pub_period_end = rospy.Publisher(prefix + '/period_end', String, queue_size=128)
        self.pub_unit = rospy.Publisher(prefix + '/unit', String, queue_size=128)
        self.pub_status = rospy.Publisher(prefix + '/status', String, queue_size=128)

        self.sub_log = rospy.Subscriber(prefix + '/log', String, self.parse_log)

        self.current_liability = liability
        self.liability_proxy.start(liability.address)

    def unregister_all(self):
        self.sub_log.unregister()

        self.liability_proxy.finish(self.current_liability.address, True)

        rospy.sleep(2)

        self.pub_token.unregister()
        self.pub_total_production.unregister()
        self.pub_tx.unregister()
        self.pub_period_start.unregister()
        self.pub_period_end.unregister()
        self.pub_unit.unregister()
        self.pub_status.unregister()

    def spin(self):
        Thread(target=self._process_liability_queue, daemon=True).start()
        rospy.spin()


if __name__ == "__main__":
    IssuerNode().spin()
